<?xml version="1.0" encoding="UTF-8"?>
<projectContext>
  <projectInfo>
  <name>nuxt-app</name>
  <dependencies>
    <dependency>
      <name>@mdi/font</name>
      <version>^7.4.47</version>
    </dependency>
    <dependency>
      <name>@nuxt/content</name>
      <version>2.13.4</version>
    </dependency>
    <dependency>
      <name>@nuxtjs/sitemap</name>
      <version>^7.0.2</version>
    </dependency>
    <dependency>
      <name>nuxt</name>
      <version>^3.15.1</version>
    </dependency>
    <dependency>
      <name>vue</name>
      <version>latest</version>
    </dependency>
    <dependency>
      <name>vue-router</name>
      <version>latest</version>
    </dependency>
  </dependencies>
</projectInfo>
  <fileTree>
    <![CDATA[
├── .DS_Store
├── .env
├── KASTOR_INTERNAL_DESCRIPTION.MD
├── LANDING_PAGE_STRUCTURE.md
├── README.md
├── app.vue
├── assets/
│   └── css/
│       └── global.css
├── components/
│   ├── BlogCard.vue
│   ├── BlogList.vue
│   ├── NavBar.vue
│   ├── blog/
│   │   └── breadcrumb.vue
│   └── landingpage/
│       ├── Benefits.vue
│       ├── CTASection.vue
│       ├── ContentTypes.vue
│       ├── DemoVideo.vue
│       ├── EarlyAccessModal.vue
│       ├── HowItWorks.vue
│       └── ScrollCTA.vue
├── composables/
│   └── useDataLayer.ts
├── content/
│   └── blog/
│       └── kastor/
│           └── kastor-beta-live.md
├── layouts/
│   ├── default.vue
│   └── landingpage.vue
├── nuxt.config.ts
├── package.json
├── pages/
│   ├── blog/
│   │   ├── [category]/
│   │   │   ├── [...slug].vue
│   │   │   └── index.vue
│   │   └── index.vue
│   └── index.vue
├── plugins/
│   └── vuetify.ts
├── project-context.xml
├── public/
│   ├── .DS_Store
│   ├── Kastor_square_dark_bg.svg
│   ├── Kastor_square_light_bg.svg
│   ├── Kastor_wordmark_dark_bg.svg
│   ├── Kastor_wordmark_light_bg.svg
│   ├── OG_image.png
│   ├── campaign-creation.png
│   ├── content-brief.png
│   ├── content-type.png
│   ├── favicon.ico
│   ├── final-blog.png
│   ├── kastor-demo-900.mp4
│   ├── kastor-demo.mp4
│   ├── privacy.html
│   ├── robots.txt
│   ├── tweet-creation.png
│   └── voice-creation.png
├── server/
│   └── tsconfig.json
├── tsconfig.json
├── types/
│   ├── accessRequest.ts
│   └── global.d.ts
└── yarn.lock

    ]]>
  </fileTree>
  <fileContents>
    
          <file>
            <path>components/landingpage/Benefits.vue</path>
            <content><![CDATA[<!-- components/Benefits.vue -->

<script setup lang="ts">
interface Benefit {
  title: string;
  description: string[];
  icon: string;
}

const benefits: Benefit[] = [
  {
    title: 'Instant Content, Effortlessly',
    description: [
      'Start creating in minutes',
      'Give Kastor an idea or a full brief',
      'Get perfect posts in seconds',
    ],
    icon: 'mdi-creation'
  },
  {
    title: 'Sounds Just Like You',
    description: [
      'Show Kastor your style or brand',
      'Your authentic voice in every post',
      'Stand out from AI-generated noise'
    ],
    icon: 'mdi-account-voice'
  },
  {
    title: 'Amplify Your Impact',
    description: [
      'Generate ideas and content in bulk',
      'Full campaigns in a few clicks',
      'Multiply content across every channel'
    ],
    icon: 'mdi-lightning-bolt'
  }
];
</script>

<template>
  <v-container
    fluid
    class="benefits-section py-16"
  >
    <div class="main-container">
      <h2 class="text-h3 text-center font-weight-black mb-12">Why Choose Kastor?</h2>
      <!-- <p class="text-subtitle-1 text-grey-darken-1 text-center mb-12 benefits-subtitle" >
        Create authentic content at scale without compromising your unique voice
      </p> -->
      <v-row
        justify="center"
        align="stretch"
      >
        <v-col
          v-for="benefit in benefits"
          :key="benefit.title"
          cols="12"
          md="4"
        >
          <div class="benefit-wrapper">
            <div class="benefit-icon-container">
              <v-icon
                :icon="benefit.icon"
                size="32"
                color="primary"
              />
            </div>
            <h3 class="text-h5 font-weight-bold mb-4">{{ benefit.title }}</h3>
            <ul class="benefit-list">
              <li
                v-for="(item, i) in benefit.description"
                :key="i"
                class="benefit-item"
              >
                <v-icon
                  size="16"
                  color="secondary"
                  class="mr-2"
                >mdi-check-circle</v-icon>
                {{ item }}
              </li>
            </ul>
          </div>
        </v-col>
      </v-row>
    </div>
  </v-container>
</template>

<style scoped>
.benefit-wrapper {
  position: relative;
  padding: 1rem;
  height: 100%;
}

.benefit-icon-container {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 72px;
  height: 72px;
  border-radius: 16px;
  margin-bottom: 1.5rem;
  background: linear-gradient(135deg,
      rgba(0, 179, 197, 0.15),
      rgba(0, 179, 197, 0.05));
}

.benefits-subtitle {
  font-size: 1.125rem;
}

.benefit-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.benefit-item {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  margin-bottom: 1rem;
  color: rgba(0, 66, 77, 0.9);
  font-size: 1.1rem;
  line-height: 1.5;
}

.benefit-item .v-icon {
  margin-top: 0.25rem;
  /* Align icon with first line of text */
}

.benefit-item:last-child {
  margin-bottom: 0;
}

@media (max-width: 960px) {
  .benefit-wrapper {
    padding: 1.5rem;
  }

  .benefit-item {
    font-size: 1rem;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/CTASection.vue</path>
            <content><![CDATA[<script setup lang="ts">
import { inject } from 'vue';

interface CTAOption {
  title: string;
  buttonText: string;
  buttonColor: string;
  benefits: string[];
  type: 'beta' | 'waitlist';
}

const props = defineProps<{
  title?: string;
}>();

const ctaOptions: CTAOption[] = [
  {
    title: 'Get Beta Access',
    buttonText: 'Apply for Beta Access',
    buttonColor: 'tertiary-darken-1',
    benefits: [
      'Use Kastor for free during the beta',
      'Help shape the product',
      'Early access to all features',
      // 'Limited spots available'
    ],
    type: 'beta'
  },
  {
    title: 'Join the Waitlist',
    buttonText: 'Join Waitlist',
    buttonColor: 'secondary',
    benefits: [
      'Be first to know when we launch',
      'Get exclusive early-bird pricing',
      'Stay updated on our progress',
      // ''
    ],
    type: 'waitlist'
  }
];

// Type the injected functions
const openBetaModal = inject('openBetaModal', () => { }) as () => void
const openWaitlistModal = inject('openWaitlistModal', () => { }) as () => void

const handleClick = (type: 'beta' | 'waitlist') => {
  if (type === 'beta') {
    openBetaModal()
  } else {
    openWaitlistModal()
  }
};

</script>

<template>
  <v-container
    fluid
    class="bg-primary py-16"
  >
    <div class="main-container cta-section">
      <h2 class="text-h3 text-white text-center mb-12 font-weight-bold">
        {{ title || 'Join Kastor Early' }}
      </h2>
      <v-row class="justify-center">
        <v-col
          v-for="option in ctaOptions"
          :key="option.type"
          cols="12"
          sm="6"
          md="5"
          class="px-4"
        >
          <v-card
            class="h-100 elevation-3"
            rounded="lg"
            :class="option.type"
          >
            <v-card-item class="pa-8">
              <div class="text-center">
                <h3 class="text-h5 font-weight-bold mb-6">{{ option.title }}</h3>
              </div>
              <div class="d-flex justify-center">
                <v-list
                  class="bg-transparent"
                  max-width="350px"
                >
                  <v-list-item
                    v-for="(benefit, i) in option.benefits"
                    :key="i"
                    :title="benefit"
                    :slim="true"
                  >
                    <template v-slot:prepend>
                      <v-icon :color="option.buttonColor">
                        mdi-check-circle
                      </v-icon>
                    </template>
                  </v-list-item>
                </v-list>
              </div>
              <div class="d-flex justify-center">
                <v-btn
                  :color="option.buttonColor"
                  class="mt-8 text-button-large w-75"
                  :class="option.type"
                  height="56"
                  @click="handleClick(option.type)"
                >
                  {{ option.buttonText }}
                </v-btn>
              </div>
            </v-card-item>
          </v-card>
        </v-col>
      </v-row>
    </div>
  </v-container>
</template>

<style scoped>
.text-button-large {
  font-size: 1.1rem;
  letter-spacing: 0.5px;
  text-transform: none;
  font-weight: 700;
  padding: 0 32px;
  min-width: 250px;
}


/* .waitlist .v-list-item:last-child .v-icon {
  display: none;
} */

@media (max-width: 600px) {
  .text-button-large {
    min-width: 300px;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/ContentTypes.vue</path>
            <content><![CDATA[<!-- components/ContentTypes.vue -->
<script setup lang="ts">
interface ContentType {
  title: string;
  icon: string;
  description: string;
}

const contentTypes: ContentType[] = [
  {
    title: 'LinkedIn Posts',
    icon: 'mdi-linkedin',
    description: 'Professional content that builds authority'
  },
  {
    title: 'Tweets',
    icon: 'mdi-twitter',
    description: 'Engaging tweets that drive conversation'
  },
  {
    title: 'Marketing Emails',
    icon: 'mdi-email-newsletter',
    description: 'Emails that get opened and clicked'
  },
  {
    title: 'Blog Posts',
    icon: 'mdi-post-outline',
    description: 'SEO-optimized articles that convert'
  },
  {
    title: 'Full Campaigns',
    icon: 'mdi-view-grid-plus-outline',
    description: 'Coordinated content across channels'
  }
];
</script>

<template>
  <v-container
    fluid
    class="content-types-section py-16"
  >
    <div class="main-container">
      <h2 class="text-h3 text-center font-weight-black mb-12">Create Any Content</h2>


      <div class="d-flex flex-wrap justify-center">
        <v-hover
          v-for="type in contentTypes"
          :key="type.title"
          v-slot="{ isHovering, props }"
        >
          <div
            class="content-type-tile"
            v-bind="props"
            :class="{ 'tile-hover': isHovering }"
          >
            <div
              class="icon-wrapper"
              :class="{ 'icon-hover': isHovering }"
            >
              <v-icon
                :icon="type.icon"
                size="32"
                color="primary"
                class="icon-transition"
              ></v-icon>
            </div>
            <h3 class="text-h6 font-weight-bold text-center mt-4 mb-2">
              {{ type.title }}
            </h3>
            <p class="text-subtitle-2 text-center description-text">
              {{ type.description }}
            </p>
          </div>
        </v-hover>
      </div>
    </div>
  </v-container>
</template>

<style scoped>
.content-type-tile {
  padding: 1rem;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  position: relative;
}

.icon-wrapper {
  background: linear-gradient(135deg,
      rgba(var(--v-theme-primary), 0.12),
      rgba(var(--v-theme-primary), 0.05));
  width: 88px;
  height: 88px;
  border-radius: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  margin-bottom: 0.5rem;
}

.icon-hover {
  transform: scale(1.05);
}

.icon-transition {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.description-text {
  max-width: 180px;
  margin: 0 auto;
  line-height: 1.5;
  transition: color 0.3s ease;
}



@media (max-width: 600px) {


  .icon-wrapper {
    width: 72px;
    height: 72px;
    border-radius: 20px;
  }

  .description-text {
    font-size: 0.875rem;
    max-width: 150px;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/DemoVideo.vue</path>
            <content><![CDATA[<!-- components/DemoVideo.vue -->

<template>
  <v-container
    fluid
    class="py-16"
  >
    <div class="main-container ">
      <v-sheet
        class="mx-auto video-sheet"
        max-width="900"
        elevation="4"
        rounded="lg"
      >
        <video
          controls
          class="demo-video"
          width="900"
          playsinline
          autoplay
          muted
          loop
        >
          <source
            src="/kastor-demo-900.mp4"
            type="video/mp4"
          >
          Your browser does not support the video tag.
        </video>
      </v-sheet>
    </div>
  </v-container>
</template>

<style scoped>
.video-container {
  position: relative;
  z-index: 2;
  line-height: 0;
  font-size: 0;
}

.video-sheet {
  padding: 0 !important;
  line-height: 0;
  font-size: 0;
  overflow: hidden;
}

.demo-video {
  display: block;
  width: 100%;
  height: auto;
  line-height: 0;
  margin: 0;
  padding: 0;
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/EarlyAccessModal.vue</path>
            <content><![CDATA[<!-- components/EarlyAccessModal.vue -->
<template>
  <v-dialog
    v-model="dialog"
    width="500"
    persistent
    :scrim="loading ? '#000000' : undefined"
  >
    <v-card class="auth-card pb-8">
      <!-- Close button -->
      <v-btn
        icon="mdi-close"
        variant="text"
        size="small"
        class="close-btn"
        @click="handleClose"
        :disabled="loading"
      ></v-btn>

      <!-- Step 1: Email Collection -->
      <v-card-title
        v-if="!submitted"
        class="text-center text-h5 font-weight-bold pt-6 pb-8"
      >
        {{ type === 'beta_access' ? 'Join the Beta for Free' : 'Join the Waitlist' }}
      </v-card-title>

      <v-card-text class="px-4 py-2">
        <!-- Step 1: Email Form -->
        <v-form
          v-if="!submitted"
          @submit.prevent="handleEmailSubmit"
          v-model="isEmailValid"
        >
          <v-text-field
            v-model="email"
            label="Email"
            type="email"
            :rules="[rules.required, rules.email]"
            required
            variant="outlined"
            density="compact"
            bg-color="grey-lighten-5"
            :disabled="loading"
          />
          <p class="text-caption text-medium-emphasis mb-8">
            We'll never share your email or send you spam.
          </p>

          <v-alert
            v-if="error"
            type="error"
            variant="tonal"
            class="my-2"
            density="compact"
            closable
          >
            {{ error }}
          </v-alert>

          <v-btn
            block
            color='primary'
            type="submit"
            size="large"
            :loading="loading"
            :disabled="!isEmailValid"
            class="mt-12 px-6"
            :class="{
              'submit-email-beta': type === 'beta_access',
              'submit-email-waitlist': type !== 'beta_access'
            }"
          >
            {{ type === 'beta_access' ? 'Apply for Beta Access' : 'Join Waitlist' }}
          </v-btn>
        </v-form>

        <!-- Step 2: Additional Details -->
        <v-form
          v-else
          @submit.prevent="handleDetailsSubmit"
          class="details-form"
        >
          <div
            v-if="!detailsSubmitted"
            class="text-center mb-6"
          >
            <v-icon
              color="success"
              size="64"
              icon="mdi-check-circle"
              class="mb-4"
            />
            <h3 class="text-h5 font-weight-bold mb-2">Thank you!</h3>
            <p
              class="text-body-1 text-medium-emphasis"
              v-html="detailsMessage"
            ></p>
          </div>

          <div
            v-else
            class="text-center"
          >
            <v-icon
              color="success"
              size="64"
              icon="mdi-check-circle"
              class="mb-4"
            />
            <h3 class="text-h5 font-weight-bold mb-2">Thank you!</h3>
            <p class="text-body-1 text-medium-emphasis">{{ finalMessage }}</p>
          </div>

          <template v-if="!detailsSubmitted">
            <v-textarea
              v-model="applicationDetails"
              label="Your message"
              variant="outlined"
              density="comfortable"
              rows="4"
              :disabled="detailsSubmitted || loading"
              class="mb-4"
              :counter="DETAILS_LIMIT"
              :rules="[rules.detailsLimit]"
              @input="applicationDetails = ($event.target as HTMLTextAreaElement).value.slice(0, DETAILS_LIMIT)"
            />

            <v-btn
              v-if="!detailsSubmitted"
              block
              color="primary"
              type="submit"
              size="large"
              :loading="loading"
              class="px-6 mt-12"
              :class="{
                'submit-details-beta': type === 'beta_access',
                'submit-details-waitlist': type !== 'beta_access'
              }"
            >
              Submit Additional Details
            </v-btn>
          </template>
        </v-form>
      </v-card-text>
    </v-card>
  </v-dialog>
</template>


<script setup lang="ts">
import { ref, watch } from 'vue'
import { AccessRequestType } from '~/types/accessRequest'
const dataLayer = useDataLayer()



const props = defineProps<{
  modelValue: boolean
  type: AccessRequestType
}>()

const emit = defineEmits<{
  'update:modelValue': [value: boolean]
}>()

// Form state
const dialog = computed({
  get: () => props.modelValue,
  set: (value) => emit('update:modelValue', value)
})

watch(dialog, (newValue) => {
  if (newValue) {
    dataLayer.push({
      event: 'modal_action',
      action: 'open',
      form_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist'
    })
  }
})


const email = ref('')
const applicationDetails = ref('')
const loading = ref(false)
const error = ref('')
const isEmailValid = ref(false)
const submitted = ref(false)
const detailsSubmitted = ref(false)
const DETAILS_LIMIT = 1000;

const runtimeConfig = useRuntimeConfig()
const API_BASE_URL = runtimeConfig.public.apiBase


// Form validation rules
const rules = {
  required: (v: string) => !!v || 'This field is required',
  email: (v: string) => /.+@.+\..+/.test(v) || 'Please enter a valid email',
  detailsLimit: (v: string) => v.length <= DETAILS_LIMIT || `Maximum ${DETAILS_LIMIT} characters`
}

const benefits = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? [
      'Use Kastor for free during the beta',
      'Help shape the product',
      'Early access to all features',
    ]
    : [
      'Be first to know when we launch',
      'Get exclusive early-bird pricing',
      'Stay updated on our progress'
    ]
})

const benefitsColor = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? 'tertiary-darken-1'
    : 'secondary'
})


const waitlistDetailsMessage = `
    We'll notify you when we launch. <br>
    Optionally: please tell us why you're excited to use Kastor!
`

const betaDetailsMessage = `
    Please tell us why you're interested and how you'd be planning on using Kastor.
`

const detailsMessage = computed(() => {
  return props.type === AccessRequestType.beta_access ? betaDetailsMessage : waitlistDetailsMessage
})

const finalMessage = computed(() => {
  return props.type === AccessRequestType.beta_access
    ? "We'll review your application and get back to you within 48 hours."
    : "We'll notify you when we launch."
})

// Handle initial email submission
async function handleEmailSubmit() {
  if (!isEmailValid.value) return

  loading.value = true
  error.value = ''

  try {
    const response = await fetch(`${API_BASE_URL}/api/early-access-request/create`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: email.value,
        request_type: props.type
      })
    })

    if (!response.ok) throw new Error('Failed to submit request')

    // Track successful email submission
    dataLayer.push({
      event: 'modal_action',
      action: 'email_submit',
      form_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist',
      status: 'success'
    })

    submitted.value = true
  } catch (e) {
    // Track failed submission
    dataLayer.push({
      event: 'modal_action',
      action: 'email_submit',
      form_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist',
      status: 'error',
      error_message: error.value
    })

    error.value = 'Something went wrong. Please try again.'
    console.error('Error submitting email:', e)
  } finally {
    loading.value = false
  }
}

// Handle additional details submission
async function handleDetailsSubmit() {
  if (!applicationDetails.value) return

  loading.value = true
  error.value = ''

  try {
    const response = await fetch(`${API_BASE_URL}/api/early-access-request/update`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: email.value,
        application_details: applicationDetails.value
      })
    })

    if (!response.ok) throw new Error('Failed to submit details')

    // Track successful details submission
    dataLayer.push({
      event: 'modal_action',
      action: 'details_submit',
      form_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist',
      status: 'success',
      details_length: applicationDetails.value.length
    })

    detailsSubmitted.value = true
  } catch (e) {
    // Track failed submission
    dataLayer.push({
      event: 'modal_action',
      action: 'details_submit',
      form_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist',
      status: 'error',
      error_message: error.value
    })

    error.value = 'Something went wrong. Please try again.'
    console.error('Error submitting details:', e)
  } finally {
    loading.value = false
  }
}

// Handle dialog close
function handleClose() {
  const formState = submitted.value 
    ? (detailsSubmitted.value ? 'completed' : 'details_pending')
    : 'email_pending'

  dataLayer.push({
    event: 'modal_action',
    action: 'close',
    modal_type: props.type === AccessRequestType.beta_access ? 'beta' : 'waitlist',
    form_state: formState
  })
  
  dialog.value = false
  // Reset form state after animation completes
  setTimeout(() => {
    email.value = ''
    applicationDetails.value = ''
    error.value = ''
    submitted.value = false
    detailsSubmitted.value = false
  }, 300)
}
</script>

<style scoped>
.auth-card {
  border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1) !important;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  overflow: hidden;
  padding-left: 24px;
  padding-right: 24px;
}

.modal-gradient {
  background: linear-gradient(135deg,
      rgb(255, 255, 255) 0%,
      rgb(248, 250, 252) 100%);
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 8px;
  z-index: 1;
}

.details-form {
  animation: fadeIn 0.3s ease-out;
}


@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }

  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Improved Typography */
.v-card-title {
  letter-spacing: -0.5px;
}

.auth-card .v-card-title {
  padding-left: 4px;
  padding-right: 4px;
}

.v-card-text {
  padding-top: 24px;
  padding-bottom: 24px;

}

@media (max-width: 700px) {
  .auth-card {
    padding-left: 4px;
    padding-right: 4px;
  }

  .v-dialog {
    margin: 0px;
    width: 100%;
  }

  .v-card-text {
    padding: 16px;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/HowItWorks.vue</path>
            <content><![CDATA[<!-- components/HowItWorks.vue -->
<script setup lang="ts">

interface Steps {
  overline: string;
  title: string;
  details: string[];
  image: string;
  alt: string;
}

// How it works
const steps: Steps[] = [
  {
    overline: '5-minute, one-time setup',
    title: 'Describe your style',
    details: [
      'Create a voice (or several) to illustrate your or your brand\'s style',
      'Share example content',
      'Tell Kastor your do\'s and don\'ts'
    ],
    image: '/voice-creation.png',
    alt: 'Voice creation: describe your writing style and add examples'
  },
  {
    overline: 'Any content, any time',
    title: 'Create a brief',
    details: [
      'Choose your content type and voice',
      'Pick your goal: new topics, product promotion, content recycling...',
      'Add as much guidance as you want (or keep it minimal)'
    ],
    image: '/content-brief.png',
    alt: 'Content brief creation: choose content type, voice, and goal'
  },
  {
    overline: 'Instant results',
    title: 'Get your content in seconds',
    details: [
      'Choose from multiple options',
      'Fine-tune to perfection or publish instantly',
      'Get more content whenever you want'
    ],
    image: '/tweet-creation.png',
    alt: 'In seconds, you get multiple options for posts that match your style'
  },
  {
    overline: 'One idea, endless content',
    title: 'Orchestrate full campaigns',
    details: [
      'Set the campaign goal and description',
      'Let Kastor suggest ideas and briefs for each asset',
      'Tweak if needed, and generate all assets at once',
    ],
    image: '/campaign-creation.png',
    alt: 'Campaign creation: define a campaign brief and generate all assets briefs and content'
  }
];
</script>

<template>

  <v-container
    fluid
    class="py-16"
  >
    <div class="main-container">
      <h2 class="text-h3 text-center font-weight-black mb-12">How it Works</h2>
      <div
        v-for="(type, index) in steps"
        :key="type.title"
        class="content-row"
      >
        <div class="content-text">
          <h4 class="font-weight-bold text-overline mb-2 text-secondary-darken-1">{{ type.overline }}</h4>
          <h3 class="text-h4 font-weight-bold mb-4">{{ type.title }}</h3>
          <div class="checklist">
            <div
              v-for="(detail, i) in type.details"
              :key="i"
              class="checklist-item"
            >
              <v-icon
                color="tertiary"
                size="small"
                class="checklist-icon"
              >mdi-check-circle</v-icon>
              <span class="checklist-text">{{ detail }}</span>
            </div>
          </div>
        </div>
        <div class="content-image">
          <v-img
            :src="type.image"
            cover
            class="rounded-lg"
            :alt="type.alt"
          ></v-img>
        </div>
      </div>
    </div>
  </v-container>

</template>

<style scoped>
/* Content card styles */
.content-row {
  display: flex;
  gap: 3rem;
  margin-bottom: 6rem;
  align-items: center;
}

.content-row:nth-child(even) {
  flex-direction: row-reverse;
}

/* no bottom margin for last content-row */
.content-row:last-child {
  margin-bottom: 0;
}

.text-overline {
  font-size: 0.875rem !important;
}

.content-text {
  flex: 0 0 30%;
}

.content-image {
  flex: 0 0 70%;
  max-width: 70%;
  min-height: 400px;
  /* This ensures the image container doesn't overflow */
}

.checklist {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.checklist-item {
  display: flex;
  align-items: flex-start;
  gap: 12px;
}

.checklist-icon {
  margin-top: 4px;
  /* Aligns icon with first line of text */
}

.checklist-text {
  line-height: 1.4;
  flex: 1;
}

@media (max-width: 959px) {
  .content-row {
    flex-direction: column !important;
    margin-bottom: 4rem;
    gap: 1rem;
  }

  .content-text {
    flex: 0 0 auto;
    width: 100%;
    order: -1;
    padding: 1rem;
  }

  .content-image {
    flex: 0 0 auto;
    width: 100%;
    max-width: 100%;
  }
}
</style>
]]></content>
          </file>
        
          <file>
            <path>components/landingpage/ScrollCTA.vue</path>
            <content><![CDATA[<!-- components/CTAs.vue -->
<script setup lang="ts">
import { useGoTo } from 'vuetify'

const goTo = useGoTo()

const scrollToCTA = () => {
  goTo('.cta-section', {
    duration: 500,
    offset: 0,
    easing: 'easeInOutCubic'
  })
}
</script>

<template>
  <div class="d-flex justify-center align-center py-16">
    <v-btn
      color="secondary"
      size="x-large"
      class="text-button-large"
      elevation="4"
      :ripple="false"
      @click="scrollToCTA"
    >
      <v-icon start>mdi-rocket-launch</v-icon>
      Try Kastor Free
    </v-btn>
  </div>
</template>

<style scoped>
.text-button-large {
  font-size: 1.1rem;
  letter-spacing: 0.5px;
  text-transform: none;
  font-weight: 700;
  min-width: 250px;
}
</style>
]]></content>
          </file>
        
          <file>
            <path>pages/index.vue</path>
            <content><![CDATA[<script setup lang="ts">
import { ref, onMounted, inject } from 'vue';

definePageMeta({
  layout: 'landingpage',
})

useSeoMeta({
  title: 'Kastor AI | Instant, Authentic Social Media & Blog Content',
  ogTitle: 'Instant, Authentic Social Media & Blog Content',
  description: 'Effortlessly create social posts and blogs that actually sound like you. From idea to authentic posts in seconds - get results across Twitter, LinkedIn, SEO and email. Try it free.',
  ogDescription: 'Effortlessly create social posts and blogs that actually sound like you. From idea to authentic posts in seconds - get results across Twitter, LinkedIn, SEO and email. Try it free.',
  ogImage: 'https://getkastor.com/OG_image.png',
  // twitterCard: 'summary_large_image',
})


// Interfaces

interface UserType {
  title: string;
  benefits: string[];
}

// Inject Modal state functions
const openBetaModal = inject('openBetaModal')
const openWaitlistModal = inject('openWaitlistModal')


// Hero section rotating content
const rotatingContent = ['Tweets', 'LinkedIn Posts', 'Blog Posts', 'Marketing Emails'];
const currentTypeIndex = ref(0);

// User types data
const userTypes: UserType[] = [
  {
    title: 'Creators & Solopreneurs',
    benefits: [
      'Create content for social, email, and blog without the time sink',
      'Keep your authentic voice while growing your following',
      'Get real marketing results without hiring a team'
    ]
  },
  {
    title: 'Marketing Teams',
    benefits: [
      'Get everyone writing in your brand\'s voice from day one',
      'Keep quality high even during product launches and events',
      'Scale content creation without scaling your team'
    ]
  }
];

// Rotate through content types
onMounted(() => {
  setInterval(() => {
    currentTypeIndex.value = (currentTypeIndex.value + 1) % rotatingContent.length;
  }, 3000);
});
</script>

<template>
  <div>
    <!-- Hero Section -->
    <v-container
      fluid
      class="hero-section"
    >
      <div class="hero-background"></div>
      <div class="hero-content main-container text-center">
        <h1 class="hero-title">
          <div class="rotating-container">
            <transition
              name="fade-slide"
              mode="out-in"
            >
              <div
                :key="currentTypeIndex"
                class="gradient-text rotating-text text-secondary"
              >
                {{ rotatingContent[currentTypeIndex] }}
              </div>
            </transition>
          </div>
          <div class="text-center mt-2">That Sound Like You</div>
        </h1>
        <h2 class="text-h4 font-weight-regular white--text mt-12 mb-16 hero-subtitle">
          From idea to authentic posts in seconds. <br> Get results across Twitter, LinkedIn, SEO and email<br>in just
          minutes per week.
        </h2>
        <div class="d-flex flex-wrap justify-center ga-4 hero-cta">
          <v-btn
            size="x-large"
            color="secondary"
            elevation="4"
            class="text-button-large beta"
            :ripple="false"
            @click="openBetaModal"
          >
            <v-icon start>mdi-rocket-launch</v-icon>
            Join the Beta
          </v-btn>
          <v-btn
            size="x-large"
            variant="flat"
            class="text-button-large waitlist-button waitlist"
            :ripple="false"
            @click="openWaitlistModal"
          >
            <v-icon start>mdi-email-outline</v-icon>
            Join Waitlist
          </v-btn>
        </div>
      </div>
    </v-container>

    <landingpageBenefits />
    <landingpageDemoVideo />
    <landingpageScrollCTA />
    <landingpageHowItWorks />
    <landingpageScrollCTA />
    <landingpageContentTypes />



    <!-- Who Uses Kastor -->
    <v-container
      fluid
      class="py-16"
    >
      <div class="main-container">
        <h2 class="text-h3 text-center font-weight-black mb-12">Who Uses Kastor</h2>
        <v-row>
          <v-col
            v-for="user in userTypes"
            :key="user.title"
            cols="12"
            md="6"
          >
            <v-card class="h-100">
              <v-card-item>
                <h3 class="text-h5 font-weight-bold mb-4">{{ user.title }}</h3>
                <v-list>
                  <v-list-item
                    v-for="(benefit, index) in user.benefits"
                    :key="index"
                    :title="benefit"
                    density="comfortable"
                  >
                    <template v-slot:prepend>
                      <v-icon
                        color="secondary"
                        size="small"
                      >mdi-check-circle</v-icon>
                    </template>
                  </v-list-item>
                </v-list>
              </v-card-item>
            </v-card>
          </v-col>
        </v-row>
      </div>
    </v-container>

    <landingpageCTASection />
  </div>
</template>

<style scoped>
.hero-section {
  position: relative;
  padding: 200px 0 120px 0;
  background: linear-gradient(135deg,
      rgb(138, 220, 235),
      rgb(178, 242, 245));
  overflow: hidden;
}

.hero-background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  /* Softer overlays with very light colors */
  background-image:
    radial-gradient(circle at 20% 20%, rgba(224, 247, 250, 0.7) 0%, transparent 50%),
    radial-gradient(circle at 90% 90%, rgba(247, 253, 254, 0.7) 0%, transparent 50%);
  z-index: 1;
}


.hero-content {
  position: relative;
  z-index: 2;
}

.hero-title {
  font-size: clamp(2.5rem, 5vw, 4rem);
  line-height: 1.3;
  letter-spacing: -0.02em;
  color: rgb(0, 66, 77);
}


.hero-title-wrapper {
  position: relative;
  height: 1.2em;
  margin-bottom: 0.5em;
  display: flex;
  justify-content: center;
  align-items: center;
}

.hero-title-line {
  margin-top: 0.2em;
}

.fixed-text {
  position: absolute;
  left: 50%;
  transform: translateX(calc(-50% - 140px));
  /* Half of rotating-text-container width */
}

.hero-cta .v-btn.v-btn--outlined {
  border-color: rgb(0, 179, 197);
  /* primary */
  color: rgb(0, 179, 197);
  /* primary */
}

.hero-subtitle {
  font-size: clamp(1.25rem, 2vw, 1.5rem);
  opacity: 0.9;
  color: rgb(0, 93, 107);
  line-height: 1.5;
}

/* Rotating text animations */
.rotating-container {
  height: 1.3em;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0.2em 0;
}

.rotating-text {
  font-weight: 700;
  white-space: nowrap;
}


.text-button-large {
  font-size: 1.1rem;
  letter-spacing: 0.5px;
  text-transform: none;
  font-weight: 700;
  padding: 0 32px;
  min-width: 250px;
}

.waitlist-button {
  color: rgb(var(--v-theme-secondary)) !important;
  border: 2px solid rgb(var(--v-theme-secondary)) !important;
  background-color: white !important;
}

ul.list-none {
  list-style: none;
  padding: 0;
}

/* Smooth fade-slide transition */
.fade-slide-enter-active,
.fade-slide-leave-active {
  transition: all 0.5s ease;
}

.fade-slide-enter-from {
  opacity: 0;
  transform: translateY(-20px);
}

.fade-slide-leave-to {
  opacity: 0;
  transform: translateY(20px);
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-10px);
  }

  100% {
    transform: translateY(0px);
  }
}

/* Responsive adjustments */
@media (max-width: 700px) {

  .hero-content {
    padding-left: 20px;
    padding-right: 20px;
  }

  .hero-title {
    font-size: clamp(2rem, 4vw, 3rem);
  }

  .hero-subtitle {
    font-size: 1.3rem !important;
  }


  .hero-title-wrapper {
    height: 2.4em;
    /* Double height for stacked layout */
  }

  .fixed-text {
    top: 0;
    transform: translateX(-50%);
    /* Center align */
  }

  .rotating-text-container {
    min-width: 200px;
    top: 1.2em;
    transform: translateX(-50%);
    text-align: center;
  }

}
</style>
]]></content>
          </file>
        
  </fileContents>
</projectContext>